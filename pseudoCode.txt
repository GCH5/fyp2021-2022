queue_time = {}
queue = {}
potential_queue = {}
for every frame:
    for every detected person inside queue_area, called a track:
        if in potential_queue:
            its accumulated_frames += 1
            if accumulated_frames > fps * enqueue threshold (10s) * 90%:
                queue.add({track_id: (start_frame=first frame inside potential_queue, position, last_frame=first frame inside potential_queue, finish_queueing=False, None)})
                remove itself from potential_queue
        elif in queue:
            if queuer.enter_finish_area_frame == None:
                update last_frame  # do not update last_frame if entered finish area
            update position
        else: # new queuer, add to queue
            addToPotential = True
            ''' # not stable
            for existing queuer in queue:
                if abs(queuer.position-track.position) < identity_switch_thres:
                    new queuer2 = queuer
                    queuer2.id = track_id
                    queue.add(queuer2)
                    addToPotential = False
                    remove queuer from the queue
                    break
            '''
            if addToPotential:
                potential_queue.add({track_id: (start_frame=frame_idx, accumulated_frames=0)})
    # do not update queuer's position once it moves out of the queue_area

    for queuer in queue:
        outside_time = (frame_idx - queuer.last_frame) / fps
        if queuer.enter_finish_area_frame == None and queuer in finish_area:
            queuer.enter_finish_area_frame = frame_idx
        if queuer.finish_queueing == False and queuer.enter_finish_area_frame is not None:
            inside_finish_area_time = (frame_idx - queuer.enter_finish_area_frame) / fps
            if inside_finish_area_time > finish threshold (1s):
                queuer.finish_queueing = True
        if queuer not in queue_area && outside_time > dequeue threshold (10s) * fps: # leave the queue
            if queuer.finish_queueing == True: # leave the queue and finish
                queueing_time = (queuer.last_frame - queuer.start_frame) / fps - threshold time
                queue_time[queuer.id] = queueing_time
            remove queuer from the queue




For all queuers that have been identified, once they enter the finish area and exceed the short finish threshold, say one second, they are marked as queueing complete. For those who leave the queueing area, they are marked as dequeued after the dequeue threshold. But among all those who left the queue, only those who are marked as finished will be counted into the queue analysis.
Note that queueing_area does not include people who have finished queuing and are being served, and the algorithm does not count people who have finished queuing.
